// âœ… Final ProtectedRoute.jsx
import { Navigate } from 'react-router-dom';

const ProtectedRoute = ({ isAuthenticated, children }) => {
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }
  return children;
};

export default ProtectedRoute;

// src/components/layout/BudgetDashboardContent.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Box,
  Typography,
  Grid,
  Paper,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  BarElement,
  CategoryScale,
  LinearScale,
} from 'chart.js';
import { Doughnut, Pie, Bar } from 'react-chartjs-2';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';
import dayjs from 'dayjs';
import config from '../../services/helper';
import TransactionForm from '../TransactionForm';

ChartJS.register(ArcElement, Tooltip, Legend, BarElement, CategoryScale, LinearScale);

const chartTypes = { Doughnut, Pie, Bar };
const today = dayjs();

export default function BudgetDashboardContent() {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading]       = useState(true);
  const [insights, setInsights]     = useState([]);
  const [selectedChart, setSelectedChart] = useState('Doughnut');
  const ChartComponent = chartTypes[selectedChart];

  useEffect(() => {
    (async () => {
      const token = localStorage.getItem('token');
      if (!token) return setLoading(false);
      try {
        const { data } = await axios.get(`${config.BASE_URL}/api/transactions`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setTransactions(data.transactions || []);
      } catch {
        setTransactions([]);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const analyzeTransactions = async (list) => {
    try {
      const { data } = await axios.post(`${config.BASE_URL}/api/analyze`, { transactions: list });
      setInsights(data.insights || []);
    } catch {}
  };

  const addTransaction = async (tx) => {
    try {
      const { data } = await axios.post(`${config.BASE_URL}/api/transactions`, tx, {
        headers: { 'x-auth-token': localStorage.getItem('token') },
      });
      const updated = [...transactions, data];
      setTransactions(updated);
      analyzeTransactions(updated);
    } catch {}
  };

  const categoryTotals = {};
  transactions.forEach(t => {
    if (t.type === 'expense') {
      categoryTotals[t.category] = (categoryTotals[t.category] || 0) + Math.abs(t.amount);
    }
  });

  const chartData = {
    labels: Object.keys(categoryTotals),
    datasets: [{
      label: 'Expenses',
      data: Object.values(categoryTotals),
      backgroundColor: ['#FF6384','#36A2EB','#FFCE56','#4BC0C0','#9966FF','#FF9F40'],
      borderWidth: 1,
    }],
  };

  const totalIncome  = transactions.filter(t => t.type === 'income').reduce((a,t)=>a+t.amount,0);
  const totalExpense = transactions.filter(t => t.type === 'expense').reduce((a,t)=>a+Math.abs(t.amount),0);

  return (
    <Box sx={{ p: 4 }}>
      <Typography variant="h4" gutterBottom>Dashboard</Typography>

      {loading ? (
        <Typography>Loading...</Typography>
      ) : (
        <Grid container spacing={3}>
          {[['Income',totalIncome],['Expenses',totalExpense],['Balance',totalIncome-totalExpense]]
            .map(([label,value], i) => (
              <Grid item xs={12} sm={4} key={i}>
                <Paper elevation={3} sx={{ p: 2 }}>
                  <Typography variant="h6">{label}</Typography>
                  <Typography variant="h4">${value.toFixed(2)}</Typography>
                </Paper>
              </Grid>
          ))}

          <Grid item xs={12} md={6}>
            <Paper elevation={3} sx={{ p: 2 }}>
              <Box display="flex" justifyContent="space-between" alignItems="center">
                <Typography variant="h6">Expense Breakdown</Typography>
                <FormControl size="small">
                  <InputLabel>Chart</InputLabel>
                  <Select
                    value={selectedChart}
                    onChange={e => setSelectedChart(e.target.value)}
                    label="Chart"
                  >
                    <MenuItem value="Doughnut">Doughnut</MenuItem>
                    <MenuItem value="Pie">Pie</MenuItem>
                    <MenuItem value="Bar">Bar</MenuItem>
                  </Select>
                </FormControl>
              </Box>
              {chartData.labels.length
                ? <ChartComponent data={chartData} />
                : <Typography>No data</Typography>}
            </Paper>
          </Grid>

          <Grid item xs={12} md={6}>
            <Paper elevation={3} sx={{ p: 2 }}>
              <Typography variant="h6">AI Insights</Typography>
              <List>
                {insights.map((ins, idx) => (
                  <ListItem key={idx}>
                    <ListItemText primary={`ðŸš¨ ${ins.description} ($${ins.amount}) - ${ins.category}`} />
                  </ListItem>
                ))}
              </List>
            </Paper>
          </Grid>

          <Grid item xs={12}>
            <TransactionForm addTransaction={addTransaction} />
          </Grid>

          <Grid item xs={12}>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DateCalendar defaultValue={today} disableFuture />
            </LocalizationProvider>
          </Grid>
        </Grid>
      )}
    </Box>
  );
}
import React, { createContext, useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import config from '../services/helper'; // Your config file

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true); // To indicate auth check is in progress

  // Function to load user from token
  const loadUser = useCallback(async () => {
    const token = localStorage.getItem('token');
    if (token) {
      // Set the token in Axios default headers for all subsequent requests
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      try {
        // Try to fetch user data from the backend to validate the token
        const res = await axios.get(`${config.BASE_URL}/api/auth/user`);
        setIsAuthenticated(true);
        // The backend `getUser` route should return the user object (e.g., { user: { id, name, email } })
        setUser(res.data.user); // Make sure your backend returns user as { user: {...} }
        console.log("User reloaded from token:", res.data.user);
      } catch (err) {
        console.error("Error loading user from token:", err.response?.data || err.message);
        // Token is invalid or expired, clear it
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        setIsAuthenticated(false);
        setUser(null);
        delete axios.defaults.headers.common['Authorization'];
      }
    } else {
      setIsAuthenticated(false);
      setUser(null);
      delete axios.defaults.headers.common['Authorization'];
    }
    setLoading(false); // Auth check is complete
  }, []);

  // Run on initial component mount to check for token
  useEffect(() => {
    loadUser();
  }, [loadUser]); // Dependency array includes loadUser to satisfy useCallback

  // Login function
  const login = async (token, userData) => {
    localStorage.setItem('token', token);
    localStorage.setItem('user', JSON.stringify(userData));
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    setIsAuthenticated(true);
    setUser(userData);
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setIsAuthenticated(false);
    setUser(null);
    delete axios.defaults.headers.common['Authorization'];
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, loading, login, logout, setIsAuthenticated }}>
      {children}
    </AuthContext.Provider>
  );
};
// src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthContext, AuthProvider } from './components/AuthContext';
import { ThemeProvider, CssBaseline, CircularProgress, Box, Typography } from '@mui/material';
import darkTheme from './theme';

import Home from './components/pages/Home';
import Login from './components/pages/Login';
import Register from './components/pages/Register';
import Dashboard from './components/pages/Dashboard';
import Transactions from './components/pages/Transaction';
import Reports from './components/pages/Reports';
import PredictBudget from './components/pages/BudgetPrediction';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = React.useContext(AuthContext);

  if (loading) {
    return (
      <Box
        sx={{
          position: 'fixed',
          inset: 0,
          bgcolor: 'rgba(0,0,0,0.5)',   // semi-opaque backdrop
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: theme => theme.zIndex.tooltip, // on top of everything
        }}
      >
        <CircularProgress
          size={80}
          thickness={5}
          sx={{
            color: 'primary.main',         // your themeâ€™s primary color
            animationDuration: '1200ms',   // slower spin
          }}
        />
        <Typography
          variant="h6"
          sx={{ mt: 2, color: 'primary.contrastText' }}
        >
          Authenticatingâ€¦
        </Typography>
      </Box>
    );
  }

  return isAuthenticated ? children : <Navigate to="/login" replace />;
};

function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <Router>
        <AuthProvider>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route path="/dashboard" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
            <Route path="/transactions" element={<ProtectedRoute><Transactions /></ProtectedRoute>} />
            <Route path="/reports" element={<ProtectedRoute><Reports /></ProtectedRoute>} />
            <Route path="/predict-budget" element={<ProtectedRoute><PredictBudget /></ProtectedRoute>} />
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </AuthProvider>
      </Router>
    </ThemeProvider>
  );
}

export default App;
